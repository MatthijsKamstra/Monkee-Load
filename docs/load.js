// Generated by Haxe 4.1.5
(function ($global) { "use strict";
class MainLoad {
	constructor() {
		this.loadingId = 0;
		this.loadingArr = [];
		this.dataAtr = "data-load";
		this.req = new XMLHttpRequest();
		let _gthis = this;
		window.document.addEventListener("DOMContentLoaded",function(event) {
			console.log("src/MainLoad.hx:18:","[monkee] template loading");
			_gthis.init();
		});
	}
	init() {
		let arr = window.document.querySelectorAll("[" + this.dataAtr + "]");
		let _g = 0;
		let _g1 = arr.length;
		while(_g < _g1) {
			let i = _g++;
			let wrapper = arr[i];
			let url = wrapper.getAttribute(this.dataAtr);
			console.log("src/MainLoad.hx:28:","templates url: " + url);
			this.loadingArr.push({ el : wrapper, url : url});
		}
		this.startLoading(this.loadingId);
	}
	startLoading(nr) {
		if(nr >= this.loadingArr.length) {
			return;
		}
		let obj = this.loadingArr[nr];
		console.log("src/MainLoad.hx:41:","start loading: " + obj.url + " into: " + Std.string(obj.el));
		this.loadHTML(obj.url,obj.el);
		this.loadingId++;
	}
	loadHTML(url,el) {
		let _gthis = this;
		this.req.open("GET",url);
		this.req.onload = function() {
			let body = _gthis.getBody(_gthis.req.response);
			if(body == "") {
				body = _gthis.req.response;
			}
			_gthis.processHTML(body,el);
			_gthis.startLoading(_gthis.loadingId);
		};
		this.req.onerror = function(error) {
			$global.console.error("[JS] error: " + error);
		};
		this.req.send();
	}
	getBody(html) {
		let test = html.toLowerCase();
		let x = test.indexOf("<body");
		if(x == -1) {
			return "";
		}
		x = test.indexOf(">",x);
		if(x == -1) {
			return "";
		}
		let y = test.lastIndexOf("</body>");
		if(y == -1) {
			y = test.lastIndexOf("</html>");
		}
		if(y == -1) {
			y = html.length;
		}
		return html.slice(x + 1,y);
	}
	processHTML(content,target) {
		target.outerHTML = content;
	}
	static main() {
		let app = new MainLoad();
	}
}
MainLoad.__name__ = true;
Math.__name__ = true;
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = true;
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true;
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true;
String.__name__ = true;
Array.__name__ = true;
js_Boot.__toStr = ({ }).toString;
MainLoad.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=load.js.map