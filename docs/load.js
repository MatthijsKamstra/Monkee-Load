// Generated by Haxe 4.1.5
(function ($global) { "use strict";
var MainLoad = function() {
	this.loadingId = 0;
	this.loadingArr = [];
	this.dataAtr = "data-load";
	this.req = new XMLHttpRequest();
	var _gthis = this;
	window.document.addEventListener("DOMContentLoaded",function(event) {
		console.log("src/MainLoad.hx:18:","load");
		_gthis.init();
	});
};
MainLoad.main = function() {
	var app = new MainLoad();
};
MainLoad.prototype = {
	init: function() {
		var arr = window.document.querySelectorAll("[" + this.dataAtr + "]");
		var _g = 0;
		var _g1 = arr.length;
		while(_g < _g1) {
			var i = _g++;
			var wrapper = arr[i];
			var url = wrapper.getAttribute(this.dataAtr);
			console.log("src/MainLoad.hx:28:",url);
			this.loadingArr.push({ el : wrapper, url : url});
		}
		this.startLoading(this.loadingId);
	}
	,startLoading: function(nr) {
		if(nr >= this.loadingArr.length) {
			return;
		}
		var obj = this.loadingArr[nr];
		this.loadHTML(obj.url,obj.el);
		this.loadingId++;
	}
	,loadHTML: function(url,el) {
		var _gthis = this;
		this.req.open("GET",url);
		this.req.onload = function() {
			var body = _gthis.getBody(_gthis.req.response);
			if(body == "") {
				body = _gthis.req.response;
			}
			_gthis.processHTML(body,el);
			_gthis.startLoading(_gthis.loadingId);
		};
		this.req.onerror = function(error) {
			$global.console.error("[JS] error: " + error);
		};
		this.req.send();
	}
	,getBody: function(html) {
		var test = html.toLowerCase();
		var x = test.indexOf("<body");
		if(x == -1) {
			return "";
		}
		x = test.indexOf(">",x);
		if(x == -1) {
			return "";
		}
		var y = test.lastIndexOf("</body>");
		if(y == -1) {
			y = test.lastIndexOf("</html>");
		}
		if(y == -1) {
			y = html.length;
		}
		return html.slice(x + 1,y);
	}
	,processHTML: function(content,target) {
		target.outerHTML = content;
	}
};
var haxe_iterators_ArrayIterator = function(array) {
	this.current = 0;
	this.array = array;
};
haxe_iterators_ArrayIterator.prototype = {
	hasNext: function() {
		return this.current < this.array.length;
	}
	,next: function() {
		return this.array[this.current++];
	}
};
MainLoad.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=load.js.map